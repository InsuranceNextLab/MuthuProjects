package com.cognizant.claim;

import java.util.ArrayList;
import java.util.HashMap;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.MotionEvent;
import android.view.SoundEffectConstants;
import android.view.View;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Switch;

public class MainActivity extends Activity implements OnItemClickListener {

	private GestureDetector mGestureDetector;
	Context con;
	ListView menulist;
	String[] names = new String[] { "policy information",
			"past claim information", "photographs of damage",
			"Record replacement values", "Take notes", "Record interview",
			"Add witness report" };

	int[] iconlist = new int[] { R.drawable.track_claims_icons,
			R.drawable.track_claims_icons, R.drawable.track_claims_icons,
			R.drawable.track_claims_icons, R.drawable.track_claims_icons,
			R.drawable.track_claims_icons, R.drawable.track_claims_icons };
	ArrayList<ClaimData> fillMaps;
	MoreAdapter moreadpter;
	ClaimData data_details, data_details1, data_details2, data_details3,
			data_details4, data_details5, data_details6;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		mGestureDetector = createGestureDetector(this);
		con = this;
		menulist = (ListView) findViewById(R.id.menus_list);
		fillMaps = new ArrayList<ClaimData>();
		BuildingList();
		setadapter();
	}

	public void setadapter() {
		moreadpter = new MoreAdapter(this, fillMaps);
		menulist.setAdapter(moreadpter);
		menulist.setOnItemClickListener(this);
	}

	private void BuildingList() {

		for (int i = 0; i < names.length; i++) {
			switch (i) {
			case 0:
				data_details = new ClaimData();
				data_details.setMenuName(names[i]);
				data_details.setMenuImage(iconlist[i]);
				fillMaps.add(data_details);
				break;
			case 1:
				data_details1 = new ClaimData();
				data_details1.setMenuName(names[i]);
				data_details1.setMenuImage(iconlist[i]);
				fillMaps.add(data_details1);
				break;
			case 2:
				data_details2 = new ClaimData();
				data_details2.setMenuName(names[i]);
				data_details2.setMenuImage(iconlist[i]);
				fillMaps.add(data_details2);
				break;
			case 3:
				data_details3 = new ClaimData();
				data_details3.setMenuName(names[i]);
				data_details3.setMenuImage(iconlist[i]);
				fillMaps.add(data_details3);
				break;
			case 4:
				data_details4 = new ClaimData();
				data_details4.setMenuName(names[i]);
				data_details4.setMenuImage(iconlist[i]);
				fillMaps.add(data_details4);
				break;
			case 5:
				data_details5 = new ClaimData();
				data_details5.setMenuName(names[i]);
				data_details5.setMenuImage(iconlist[i]);
				fillMaps.add(data_details5);
				break;
			case 6:
				data_details6 = new ClaimData();
				data_details6.setMenuName(names[i]);
				data_details6.setMenuImage(iconlist[i]);
				fillMaps.add(data_details6);
				break;

			default:
				break;
			}

		}

	}

	private GestureDetector createGestureDetector(Context context) {
		GestureDetector gestureDetector = new GestureDetector(context);
		// Create a base listener for generic gestures
		gestureDetector.setBaseListener(new GestureDetector.BaseListener() {
			public boolean onGesture(Gesture gesture) {
				if (gesture == Gesture.TWO_TAP) {
					// do something on two finger tap
					return true;
				} else if (gesture == Gesture.SWIPE_RIGHT) {
					if (menulist.getSelectedItemPosition() < menulist
							.getCount() - 1) {

						menulist.setSelection(menulist
								.getSelectedItemPosition() + 1);

						menulist.playSoundEffect(SoundEffectConstants.NAVIGATION_UP);
						return true;
					}
					// do something on right (forward) swipe

				} else if (gesture == Gesture.SWIPE_LEFT) {
					if (menulist.getSelectedItemPosition() > 0) {
						menulist.setSelection(menulist
								.getSelectedItemPosition() - 1);
						menulist.playSoundEffect(SoundEffectConstants.NAVIGATION_DOWN);
						return true;
					}
				} else if (gesture == Gesture.SWIPE_DOWN) {
					finish();
				}
				return false;
			}

		});

		return gestureDetector;
	}

	@Override
	public boolean onGenericMotionEvent(MotionEvent event) {
		// TODO Auto-generated method stub
		if (mGestureDetector != null) {
			return mGestureDetector.onMotionEvent(event);
		}
		return super.onGenericMotionEvent(event);
	}

	@Override
	public void onItemClick(AdapterView<?> parent, View view, int position,
			long id) {
		// TODO Auto-generated method stub
		switch (position) {
		case 0:
			startActivity(new Intent(con, ClaimInfo.class));

			break;
		case 1:
			startActivity(new Intent(con, PolicyInfo.class));
			break;
		case 2:
			startActivity(new Intent(con, CameraActivity.class));
			break;
		case 3:
			startActivity(new Intent(con, CameraActivity.class));
			break;

		case 4:
			startActivity(new Intent(con, StreamingActivity.class));
			break;
		default:
			break;
		}
	}
}
