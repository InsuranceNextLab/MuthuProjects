package com.cognizant.claim;

import java.io.File;

import com.google.android.glass.media.CameraManager;
import com.google.android.glass.touchpad.Gesture;
import com.google.android.glass.touchpad.GestureDetector;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.FileObserver;
import android.provider.MediaStore;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.widget.TextView;

public class ViewClaim extends Activity {

	TextView txt_policy_no, txt_survey_no, txt_cause_loss, txt_address,
			txt_reported_by, claim_number;
	Bundle data;
	String Claimno;
	Context context;
	private static final int TAKE_VIDEO_REQUEST = 2;
	private GestureDetector mGestureDetector;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_view_claim);
		context = this;
		txt_policy_no = (TextView) findViewById(R.id.policy_no);
		txt_survey_no = (TextView) findViewById(R.id.survey_no);
		txt_reported_by = (TextView) findViewById(R.id.reported_by);
		txt_cause_loss = (TextView) findViewById(R.id.cause_loss);
		txt_address = (TextView) findViewById(R.id.address);
		claim_number = (TextView) findViewById(R.id.claim_no);
		data = getIntent().getExtras();
		Claimno = getResources().getString(R.string.risk_assno);
		claim_number.setText(String.format(Claimno,
				data.getString("claim_number")));
		txt_policy_no.setText(data.getString("policy_number"));
		txt_survey_no.setText(data.getString("survey_number"));
		txt_reported_by.setText(data.getString("reported_by"));
		txt_address.setText(data.getString("address"));
		txt_cause_loss.setText(data.getString("cause_loss"));
		mGestureDetector = createGestureDetector(this);

	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.view_claim, menu);
		return true;
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// Handle action bar item clicks here. The action bar will
		// automatically handle clicks on the Home/Up button, so long
		// as you specify a parent activity in AndroidManifest.xml.
		int id = item.getItemId();
		switch (id) {
		case R.id.call:
			break;
		case R.id.startsurvey:
			break;
		case R.id.captureimage:
			startActivity(new Intent(context, CameraActivity.class));
			break;
		case R.id.capturevideo:
			Intent intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
			if (intent != null) {
				startActivityForResult(intent, TAKE_VIDEO_REQUEST);
			}
			break;
		case R.id.livestream:
			startActivity(new Intent(context, StreamingActivity.class));
			break;
		case R.id.exit:
			finish();
			break;
		default:
			return true;
		}
		return super.onOptionsItemSelected(item);
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == TAKE_VIDEO_REQUEST && resultCode == RESULT_OK) {
			String picturePath = data
					.getStringExtra(CameraManager.EXTRA_VIDEO_FILE_PATH);
			processPictureWhenReady(picturePath);
		}
	}

	private void processPictureWhenReady(final String picturePath) {
		final File pictureFile = new File(picturePath);

		if (pictureFile.exists()) {
			// The picture is ready; process it.
			String path = Appsettings.fileCreation(picturePath);
			Log.i("Path", path + "");
		} else {
			// The file does not exist yet. Before starting the file observer,
			// you
			// can update your UI to let the user know that the application is
			// waiting for the picture (for example, by displaying the thumbnail
			// image and a progress indicator).

			final File parentDirectory = pictureFile.getParentFile();
			FileObserver observer = new FileObserver(parentDirectory.getPath()) {
				// Protect against additional pending events after CLOSE_WRITE
				// is
				// handled.
				private boolean isFileWritten;

				@Override
				public void onEvent(int event, String path) {
					if (!isFileWritten) {
						// For safety, make sure that the file that was created
						// in
						// the directory is actually the one that we're
						// expecting.
						File affectedFile = new File(parentDirectory, path);
						isFileWritten = (event == FileObserver.CLOSE_WRITE && affectedFile
								.equals(pictureFile));

						if (isFileWritten) {
							stopWatching();

							// Now that the file is ready, recursively call
							// processPictureWhenReady again (on the UI thread).
							runOnUiThread(new Runnable() {
								@Override
								public void run() {
									processPictureWhenReady(picturePath);
								}
							});
						}
					}
				}
			};
			observer.startWatching();
		}
	}

	private GestureDetector createGestureDetector(Context context) {
		GestureDetector gestureDetector = new GestureDetector(context);
		// Create a base listener for generic gestures
		gestureDetector.setBaseListener(new GestureDetector.BaseListener() {
			public boolean onGesture(Gesture gesture) {
				if (gesture == Gesture.TAP) {
					// do something on two finger tap
					openOptionsMenu();
					return true;
				} else if (gesture == Gesture.SWIPE_RIGHT) {

				} else if (gesture == Gesture.SWIPE_LEFT) {

				} else if (gesture == Gesture.SWIPE_DOWN) {
					finish();
				}
				return false;
			}

		});

		return gestureDetector;
	}

	@Override
	public boolean onGenericMotionEvent(MotionEvent event) {
		// TODO Auto-generated method stub
		if (mGestureDetector != null) {
			return mGestureDetector.onMotionEvent(event);
		}
		return super.onGenericMotionEvent(event);
	}

}
