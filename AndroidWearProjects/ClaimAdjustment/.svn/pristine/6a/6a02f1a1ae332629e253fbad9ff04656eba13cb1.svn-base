package com.cognizant.utils;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Locale;

import org.json.JSONArray;
import org.json.JSONException;

import android.content.Context;
import android.content.SharedPreferences;
import android.graphics.Typeface;
import android.net.ConnectivityManager;
import android.os.Environment;
import android.preference.PreferenceManager;
import android.util.Log;
import android.widget.TextView;

public class Appsettings {

	/**** Live Details **********/
	private static final String PREF_NAME = "ClaimAdjustment";
	public static final String STREAM_URL = "rtsp://174.129.3.17:1935/live/claimadjuster";

	public static final String PUBLISHER_USERNAME = "insurancenxt";
	public static final String PUBLISHER_PASSWORD = "welcome123";
	static String path;
	static String finalpath;
	public static final int LONG = 2;
	public static final int NORMAL = 1;
	public static final int SHORT = 0;
	public static final String PORT = "8080";
	public static final String IP_ADDRESS = "174.129.3.17:8080";
	public static final String REGISTER_URL = "http://174.129.3.17:8080/claimadjuster/ClaimRequest.php";
	public static final int TIMEOUT_CON_SHORT = 300000;
	public static final int TIMEOUT_SOCKET_SHORT = 300000;
	public static final int TIMEOUT_CON_NORMAL = 500000;
	public static final int TIMEOUT_SOCKET_NORMAL = 500000;
	public static final int TIMEOUT_CON_LONG = 700000;
	public static final int TIMEOUT_SOCKET_LONG = 700000;

	public static String fileCreation(String image_filepath, Context context) {
		BufferedOutputStream bw = null;
		BufferedInputStream br = null;
		File localFile;
		String image_filename, temp_path;
		String sdcard_filepath = Environment.getExternalStorageDirectory()
				.getAbsolutePath().toString()
				+ "/" + "ClaimAdjuster";

		File file = new File(sdcard_filepath);
		if (!file.exists()) {
			if (file.mkdir()) {
			}
		}
		int lastIndex = image_filepath.length();
		int idx = image_filepath.lastIndexOf("/");
		image_filename = image_filepath.substring(idx + 1, lastIndex);
		temp_path = sdcard_filepath + "/"
				+ Appsettings.getString(context, "Claim_number") + ".MP4";
		try {
			localFile = new File(temp_path);
			if (!localFile.exists()) {
				localFile.createNewFile(); // otherwise dropbox client
			} // will fail

			br = new BufferedInputStream(new FileInputStream(image_filepath));
			bw = new BufferedOutputStream(new FileOutputStream(localFile));
			byte[] buf = new byte[1024];
			int read = 0;
			while ((read = br.read(buf, 0, buf.length)) != -1) {
				bw.write(buf, 0, read);
			}
			br.close();
			bw.close();
		} catch (Exception e) {
			// TODO: handle exception
			Log.i("Imageselection_Error", e.getMessage() + "");
			return temp_path;
		}
		return temp_path;
	}

	public static String finalPath(Context context) {
		path = Environment.getExternalStorageDirectory().getAbsolutePath()
				.toString();

		String timeStamp = new SimpleDateFormat("yyyMMdd_HHmmss", Locale.UK)
				.format(new Date());
		File direct = new File(path + "/claimadjuster");
		Log.i("tempdirectory", "Initial Folder Created = " + path);
		if (!direct.exists()) {
			if (direct.mkdir()) {
				// directory is created;
				Log.i("tempdirectory", "Folder Created");
				finalpath = path + "/claimadjuster/"
						+ Appsettings.getString(context, "Claim_number")
						+ ".jpg";
			}

		} else {
			finalpath = path + "/claimadjuster/"
					+ Appsettings.getString(context, "Claim_number") + ".jpg";
		}
		Log.i("tempdirectory", "End Folder Created = " + finalpath);
		return finalpath;

	}

	public static String getAudioPath(Context context) {
		path = Environment.getExternalStorageDirectory().getAbsolutePath()
				.toString();
		File direct = new File(path + "/claimadjuster");
		Log.i("tempdirectory", "Initial Folder Created = " + path);
		if (!direct.exists()) {
			if (direct.mkdir()) {
				// directory is created;
				Log.i("tempdirectory", "Folder Created");
				finalpath = path + "/claimadjuster/"
						+ Appsettings.getString(context, "Claim_number")
						+ ".MP3";
			}

		} else {
			finalpath = path + "/claimadjuster/"
					+ Appsettings.getString(context, "Claim_number") + ".MP3";
		}
		Log.i("tempdirectory", "End Folder Created = " + finalpath);
		return finalpath;

	}

	static public boolean deleteDirectory(File path) {

		if (path.exists()) {
			File[] files = path.listFiles();
			if (files == null) {
				return true;
			}
			for (int i = 0; i < files.length; i++) {
				if (files[i].isDirectory()) {
					deleteDirectory(files[i]);
				} else {
					files[i].delete();
				}
			}
		}
		return (path.delete());
	}

	public static boolean isCheckConnectivity(Context con) {
		ConnectivityManager conMgr = (ConnectivityManager) con
				.getSystemService(Context.CONNECTIVITY_SERVICE);
		if (conMgr.getActiveNetworkInfo() != null
				&& conMgr.getActiveNetworkInfo().isAvailable()
				&& conMgr.getActiveNetworkInfo().isConnected()) {
			return true;
		}
		return false;

	}

	public static String getString(Context context, String tag) {
		SharedPreferences pref = context.getSharedPreferences(PREF_NAME, 0);

		return pref.getString(tag, "");
	}

	public static void putString(Context context, String tag, String value) {
		SharedPreferences pref = context.getSharedPreferences(PREF_NAME, 0);
		SharedPreferences.Editor editor = pref.edit();
		editor.putString(tag, value);
		editor.commit();
	}

	public static boolean checkForObjectInSharedPrefs(final Context context,
			final String key) {
		return PreferenceManager.getDefaultSharedPreferences(context).contains(
				key);
	}

	public static void commitNewMemoList(final Context context,
			final String key, final List<String> memoList) {
		SharedPreferences.Editor sharedPrefEditor = PreferenceManager
				.getDefaultSharedPreferences(context).edit();

		if (!memoList.isEmpty()) {
			sharedPrefEditor.putString(key, new JSONArray(memoList).toString());
		} else {
			sharedPrefEditor.putString(key, null);
		}

		sharedPrefEditor.commit();
	}

	/**
	 * Gets the arraylist from shared preferences
	 * 
	 * @param context
	 * @param key
	 * @return
	 */
	public static ArrayList<String> getStringArrayPref(final Context context,
			String key) {

		SharedPreferences sharedPref = PreferenceManager
				.getDefaultSharedPreferences(context);
		String json = sharedPref.getString(key, null);
		ArrayList<String> memoList = new ArrayList<String>();

		if (json != null) {
			try {
				JSONArray a = new JSONArray(json);

				for (int i = 0; i < a.length(); i++) {
					memoList.add(a.optString(i));
				}
			} catch (JSONException e) {
			}
		}

		return memoList;
	}

	/**
	 * Deletes an item from the list stored in shared preferences
	 * 
	 * @param index
	 * @param context
	 * @param key
	 */
	public static void deleteMemoAtIndex(int index, Context context, String key) {
		ArrayList<String> memoList = new ArrayList<String>(getStringArrayPref(
				context, key));
		memoList.remove(index);
		commitNewMemoList(context, key, memoList);
	}

}
